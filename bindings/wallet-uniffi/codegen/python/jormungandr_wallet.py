# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder():
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer after consuming")
        finally:
            self.free()

    # For every type that lowers into a RustBuffer, we provide helper methods for
    # conveniently doing the lifting and lowering. Putting them on this internal
    # helper object (rather than, say, as methods on the public classes) makes it
    # easier for us to hide these implementation details from consumers, in the face
    # of python's free-for-all type system.

    # The primitive String type.

    @staticmethod
    def allocFromString(value):
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

    def consumeIntoString(self):
        with self.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    # The Record type BlockDate.

    @staticmethod
    def allocFromTypeBlockDate(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeBlockDate(builder, v)
            return builder.finalize()

    def consumeIntoTypeBlockDate(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeBlockDate(stream)

    # The Record type LinearFee.

    @staticmethod
    def allocFromTypeLinearFee(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeLinearFee(builder, v)
            return builder.finalize()

    def consumeIntoTypeLinearFee(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeLinearFee(stream)

    # The Record type PerCertificateFee.

    @staticmethod
    def allocFromTypePerCertificateFee(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypePerCertificateFee(builder, v)
            return builder.finalize()

    def consumeIntoTypePerCertificateFee(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypePerCertificateFee(stream)

    # The Record type PerVoteCertificateFee.

    @staticmethod
    def allocFromTypePerVoteCertificateFee(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypePerVoteCertificateFee(builder, v)
            return builder.finalize()

    def consumeIntoTypePerVoteCertificateFee(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypePerVoteCertificateFee(stream)

    # The Record type Proposal.

    @staticmethod
    def allocFromTypeProposal(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeProposal(builder, v)
            return builder.finalize()

    def consumeIntoTypeProposal(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeProposal(stream)

    # The Record type SettingsInit.

    @staticmethod
    def allocFromTypeSettingsInit(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeSettingsInit(builder, v)
            return builder.finalize()

    def consumeIntoTypeSettingsInit(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeSettingsInit(stream)

    # The Record type TimeEra.

    @staticmethod
    def allocFromTypeTimeEra(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeTimeEra(builder, v)
            return builder.finalize()

    def consumeIntoTypeTimeEra(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeTimeEra(stream)

    # The Enum type Discrimination.

    @staticmethod
    def allocFromTypeDiscrimination(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypeDiscrimination(builder, v)
            return builder.finalize()

    def consumeIntoTypeDiscrimination(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypeDiscrimination(stream)

    # The Enum type PayloadTypeConfig.

    @staticmethod
    def allocFromTypePayloadTypeConfig(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeTypePayloadTypeConfig(builder, v)
            return builder.finalize()

    def consumeIntoTypePayloadTypeConfig(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readTypePayloadTypeConfig(stream)

    # The Sequence<T> type for u8.

    @staticmethod
    def allocFromSequenceu8(v):
        with RustBuffer.allocWithBuilder() as builder:
            RustBufferTypeBuilder.writeSequenceu8(builder, v)
            return builder.finalize()

    def consumeIntoSequenceu8(self):
        with self.consumeWithStream() as stream:
            return RustBufferTypeReader.readSequenceu8(stream)


class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])

class RustBufferStream(object):
    # Helper for structured reading of bytes from a RustBuffer

    def __init__(self, rbuf):
        self.rbuf = rbuf
        self.offset = 0

    def remaining(self):
        return self.rbuf.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.rbuf.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        data = self.rbuf.data[self.offset:self.offset+size]
        self.offset += size
        return data

class RustBufferTypeReader(object):
    # For every type used in the interface, we provide helper methods for conveniently
    # reading that type in a buffer. Putting them on this internal helper object (rather
    # than, say, as methods on the public classes) makes it easier for us to hide these
    # implementation details from consumers, in the face of python's free-for-all type
    # system.
    # This class holds the logic for *how* to read the types from a buffer - the buffer itself is
    # always passed in, because the actual buffer might be owned by a different crate/module.

    @staticmethod
    def readU8(stream):
        return stream._unpack_from(1, ">B")

    @staticmethod
    def readU32(stream):
        return stream._unpack_from(4, ">I")

    @staticmethod
    def readU64(stream):
        return stream._unpack_from(8, ">Q")

    @staticmethod
    def readString(stream):
        size = stream._unpack_from(4, ">i")
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = stream.read(size)
        return utf8Bytes.decode("utf-8")

    # The Object type Settings.

    @staticmethod
    def readTypeSettings(stream):
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        pointer = stream._unpack_from(8, ">Q")
        return Settings._make_instance_(pointer)

    # The Object type Wallet.

    @staticmethod
    def readTypeWallet(stream):
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        pointer = stream._unpack_from(8, ">Q")
        return Wallet._make_instance_(pointer)

    # The Record type BlockDate.

    @classmethod
    def readTypeBlockDate(cls, stream):
        return BlockDate(
            cls.readU32(stream),
            cls.readU32(stream)
        )

    # The Record type LinearFee.

    @classmethod
    def readTypeLinearFee(cls, stream):
        return LinearFee(
            cls.readU64(stream),
            cls.readU64(stream),
            cls.readU64(stream),
            cls.readTypePerCertificateFee(stream),
            cls.readTypePerVoteCertificateFee(stream)
        )

    # The Record type PerCertificateFee.

    @classmethod
    def readTypePerCertificateFee(cls, stream):
        return PerCertificateFee(
            cls.readU64(stream),
            cls.readU64(stream),
            cls.readU64(stream)
        )

    # The Record type PerVoteCertificateFee.

    @classmethod
    def readTypePerVoteCertificateFee(cls, stream):
        return PerVoteCertificateFee(
            cls.readU64(stream),
            cls.readU64(stream)
        )

    # The Record type Proposal.

    @classmethod
    def readTypeProposal(cls, stream):
        return Proposal(
            cls.readSequenceu8(stream),
            cls.readU8(stream),
            cls.readU8(stream),
            cls.readTypePayloadTypeConfig(stream)
        )

    # The Record type SettingsInit.

    @classmethod
    def readTypeSettingsInit(cls, stream):
        return SettingsInit(
            cls.readTypeLinearFee(stream),
            cls.readTypeDiscrimination(stream),
            cls.readSequenceu8(stream),
            cls.readU64(stream),
            cls.readU8(stream),
            cls.readTypeTimeEra(stream),
            cls.readU8(stream)
        )

    # The Record type TimeEra.

    @classmethod
    def readTypeTimeEra(cls, stream):
        return TimeEra(
            cls.readU32(stream),
            cls.readU64(stream),
            cls.readU32(stream)
        )

    # The Enum type Discrimination.

    @classmethod
    def readTypeDiscrimination(cls, stream):
        variant = stream._unpack_from(4, ">i")
        return Discrimination(variant)

    # The Enum type PayloadTypeConfig.

    @classmethod
    def readTypePayloadTypeConfig(cls, stream):
        variant = stream._unpack_from(4, ">i")
        
        if variant == 1:
            return PayloadTypeConfig.PUBLIC()
            
        if variant == 2:
            return PayloadTypeConfig.PRIVATE(
                cls.readString(stream)
            )
            
        raise InternalError("Unexpected variant tag for TypePayloadTypeConfig")

    

    # The Error type Error

    # Top-level read method
    @classmethod
    def readTypeError(cls, stream):
        variant = stream._unpack_from(4, ">i")
        try:
            read_variant_method = getattr(cls, 'readVariant{}OfTypeError'.format(variant))
        except AttributeError:
            raise InternalError("Unexpected variant value for error TypeError ({})".format(variant))
        return read_variant_method(stream)

    # Read methods for each individual variants

    @classmethod
    def readVariant1OfTypeError(cls, stream):
        return Error.InvalidEncryptionKey(cls.readString(stream))

    @classmethod
    def readVariant2OfTypeError(cls, stream):
        return Error.MalformedVotePlanId(cls.readString(stream))

    @classmethod
    def readVariant3OfTypeError(cls, stream):
        return Error.CoreError(cls.readString(stream))

    @classmethod
    def readVariant4OfTypeError(cls, stream):
        return Error.MalformedBlock0Hash(cls.readString(stream))

    # The Sequence<T> type for u8.

    @classmethod
    def readSequenceu8(cls, stream):
        count = stream._unpack_from(4, ">i")
        if count < 0:
            raise InternalError("Unexpected negative sequence length")
        items = []
        while count > 0:
            items.append(cls.readU8(stream))
            count -= 1
        return items

class RustBufferBuilder(object):
    # Helper for structured writing of bytes into a RustBuffer.

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

class RustBufferTypeBuilder(object):
    # For every type used in the interface, we provide helper methods for conveniently
    # writing values of that type in a buffer. Putting them on this internal helper object
    # (rather than, say, as methods on the public classes) makes it easier for us to hide
    # these implementation details from consumers, in the face of python's free-for-all
    # type system.
    # This class holds the logic for *how* to write the types to a buffer - the buffer itself is
    # always passed in, because the actual buffer might be owned by a different crate/module.

    @staticmethod
    def writeU8(builder, v):
        builder._pack_into(1, ">B", v)

    @staticmethod
    def writeU32(builder, v):
        builder._pack_into(4, ">I", v)

    @staticmethod
    def writeU64(builder, v):
        builder._pack_into(8, ">Q", v)

    @staticmethod
    def writeString(builder, v):
        utf8Bytes = v.encode("utf-8")
        builder._pack_into(4, ">i", len(utf8Bytes))
        builder.write(utf8Bytes)

    # The Object type Settings.
    # We write the pointer value directly - what could possibly go wrong?

    @classmethod
    def writeTypeSettings(cls, builder, v):
        if not isinstance(v, Settings):
            raise TypeError("Expected Settings instance, {} found".format(v.__class__.__name__))
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        cls.writeU64(builder, v._pointer)

    # The Object type Wallet.
    # We write the pointer value directly - what could possibly go wrong?

    @classmethod
    def writeTypeWallet(cls, builder, v):
        if not isinstance(v, Wallet):
            raise TypeError("Expected Wallet instance, {} found".format(v.__class__.__name__))
        # The Rust code always expects pointers written as 8 bytes,
        # and will fail to compile if they don't fit in that size.
        cls.writeU64(builder, v._pointer)

    # The Record type BlockDate.

    @classmethod
    def writeTypeBlockDate(cls, builder, v):
        cls.writeU32(builder, v.epoch)
        cls.writeU32(builder, v.slot)

    # The Record type LinearFee.

    @classmethod
    def writeTypeLinearFee(cls, builder, v):
        cls.writeU64(builder, v.constant)
        cls.writeU64(builder, v.coefficient)
        cls.writeU64(builder, v.certificate)
        cls.writeTypePerCertificateFee(builder, v.per_certificate_fees)
        cls.writeTypePerVoteCertificateFee(builder, v.per_vote_certificate_fees)

    # The Record type PerCertificateFee.

    @classmethod
    def writeTypePerCertificateFee(cls, builder, v):
        cls.writeU64(builder, v.certificate_pool_registration)
        cls.writeU64(builder, v.certificate_stake_delegation)
        cls.writeU64(builder, v.certificate_owner_stake_delegation)

    # The Record type PerVoteCertificateFee.

    @classmethod
    def writeTypePerVoteCertificateFee(cls, builder, v):
        cls.writeU64(builder, v.certificate_vote_plan)
        cls.writeU64(builder, v.certificate_vote_cast)

    # The Record type Proposal.

    @classmethod
    def writeTypeProposal(cls, builder, v):
        cls.writeSequenceu8(builder, v.vote_plan_id)
        cls.writeU8(builder, v.index)
        cls.writeU8(builder, v.options)
        cls.writeTypePayloadTypeConfig(builder, v.payload_type)

    # The Record type SettingsInit.

    @classmethod
    def writeTypeSettingsInit(cls, builder, v):
        cls.writeTypeLinearFee(builder, v.fees)
        cls.writeTypeDiscrimination(builder, v.discrimination)
        cls.writeSequenceu8(builder, v.block0_hash)
        cls.writeU64(builder, v.block0_date)
        cls.writeU8(builder, v.slot_duration)
        cls.writeTypeTimeEra(builder, v.time_era)
        cls.writeU8(builder, v.transaction_max_expiry_epochs)

    # The Record type TimeEra.

    @classmethod
    def writeTypeTimeEra(cls, builder, v):
        cls.writeU32(builder, v.epoch_start)
        cls.writeU64(builder, v.slot_start)
        cls.writeU32(builder, v.slots_per_epoch)

    # The Enum type Discrimination.

    @classmethod
    def writeTypeDiscrimination(cls, builder, v):
        builder._pack_into(4, ">i", v.value)

    # The Enum type PayloadTypeConfig.

    @classmethod
    def writeTypePayloadTypeConfig(cls, builder, v):
        if v.is_public():
            builder._pack_into(4, ">i", 1)
        if v.is_private():
            builder._pack_into(4, ">i", 2)
            cls.writeString(builder, v.encryption_key)# This type cannot currently be serialized, but we can produce a helpful error.

    @staticmethod
    def writeTypeError(self, builder):
        raise InternalError("RustBufferStream.write() not implemented yet for TypeError")

    # The Sequence<T> type for u8.

    @classmethod
    def writeSequenceu8(cls, builder, items):
        builder._pack_into(4, ">i", len(items))
        for item in items:
            cls.writeU8(builder, item)

# Error definitions
class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_SUCCESS)"
        else:
            return "RustCallStatus(<invalid code>)"

class Error:

    # Each variant is a nested class of the error itself.
    # It just carries a string error message, so no special implementation is necessary.
    class InvalidEncryptionKey(Exception):
        pass
    class MalformedVotePlanId(Exception):
        pass
    class CoreError(Exception):
        pass
    class MalformedBlock0Hash(Exception):
        pass

# Map error classes to the RustBufferTypeBuilder method to read them
_error_class_to_reader_method = {
    Error: RustBufferTypeReader.readTypeError,
}

def consume_buffer_into_error(error_class, rust_buffer):
    reader_method = _error_class_to_reader_method[error_class]
    with rust_buffer.consumeWithStream() as stream:
        return reader_method(stream)

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_class, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_class must be set to the error class that corresponds to the result.
    call_status = RustCallStatus(code=0, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        return result
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_class is None:
            call_status.err_buf.contents.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but no error class set")
        else:
            raise consume_buffer_into_error(error_class, call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = call_status.error_buf.consumeIntoString()
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# This is how we find and load the dynamic library provided by the component.
# For now we just look it up by name.
#
# XXX TODO: This will probably grow some magic for resolving megazording in future.
# E.g. we might start by looking for the named component in `libuniffi.so` and if
# that fails, fall back to loading it separately from `lib${componentName}.so`.

def loadIndirect():
    if sys.platform == "linux":
        libname = "lib{}.so"
    elif sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    return getattr(ctypes.cdll, libname.format("uniffi_jormungandr_wallet"))

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.ffi_jormungandr_wallet_cc83_Wallet_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_jormungandr_wallet_cc83_Wallet_object_free.restype = None
_UniFFILib.jormungandr_wallet_cc83_Wallet_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.jormungandr_wallet_cc83_Wallet_new.restype = ctypes.c_void_p
_UniFFILib.jormungandr_wallet_cc83_Wallet_set_state.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.c_uint32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.jormungandr_wallet_cc83_Wallet_set_state.restype = None
_UniFFILib.jormungandr_wallet_cc83_Wallet_vote.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    RustBuffer,
    ctypes.c_uint8,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.jormungandr_wallet_cc83_Wallet_vote.restype = RustBuffer
_UniFFILib.ffi_jormungandr_wallet_cc83_Settings_object_free.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_jormungandr_wallet_cc83_Settings_object_free.restype = None
_UniFFILib.jormungandr_wallet_cc83_Settings_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.jormungandr_wallet_cc83_Settings_new.restype = ctypes.c_void_p
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_free.restype = None
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_jormungandr_wallet_cc83_rustbuffer_reserve.restype = RustBuffer

# Public interface members begin here.





class Discrimination(enum.Enum):
    PRODUCTION = 1
    TEST = 2
    







class PayloadTypeConfig(object):
    def __init__(self):
        raise RuntimeError("PayloadTypeConfig cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class PUBLIC(object):
        def __init__(self,):
            
            
            pass
            

        def __str__(self):
            return "PayloadTypeConfig.PUBLIC()".format()

        def __eq__(self, other):
            if not other.is_public():
                return False
            return True
    class PRIVATE(object):
        def __init__(self,encryption_key ):
            
            self.encryption_key = encryption_key
            

        def __str__(self):
            return "PayloadTypeConfig.PRIVATE(encryption_key={} )".format(self.encryption_key )

        def __eq__(self, other):
            if not other.is_private():
                return False
            if self.encryption_key != other.encryption_key:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_public(self):
        return isinstance(self, PayloadTypeConfig.PUBLIC)
    def is_private(self):
        return isinstance(self, PayloadTypeConfig.PRIVATE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
PayloadTypeConfig.PUBLIC = type("PayloadTypeConfig.PUBLIC", (PayloadTypeConfig.PUBLIC, PayloadTypeConfig,), {})
PayloadTypeConfig.PRIVATE = type("PayloadTypeConfig.PRIVATE", (PayloadTypeConfig.PRIVATE, PayloadTypeConfig,), {})



class LinearFee(object):
    def __init__(self,constant, coefficient, certificate, per_certificate_fees, per_vote_certificate_fees ):
        self.constant = constant
        self.coefficient = coefficient
        self.certificate = certificate
        self.per_certificate_fees = per_certificate_fees
        self.per_vote_certificate_fees = per_vote_certificate_fees

    def __str__(self):
        return "LinearFee(constant={}, coefficient={}, certificate={}, per_certificate_fees={}, per_vote_certificate_fees={} )".format(self.constant, self.coefficient, self.certificate, self.per_certificate_fees, self.per_vote_certificate_fees )

    def __eq__(self, other):
        if self.constant != other.constant:
            return False
        if self.coefficient != other.coefficient:
            return False
        if self.certificate != other.certificate:
            return False
        if self.per_certificate_fees != other.per_certificate_fees:
            return False
        if self.per_vote_certificate_fees != other.per_vote_certificate_fees:
            return False
        return True

class PerCertificateFee(object):
    def __init__(self,certificate_pool_registration, certificate_stake_delegation, certificate_owner_stake_delegation ):
        self.certificate_pool_registration = certificate_pool_registration
        self.certificate_stake_delegation = certificate_stake_delegation
        self.certificate_owner_stake_delegation = certificate_owner_stake_delegation

    def __str__(self):
        return "PerCertificateFee(certificate_pool_registration={}, certificate_stake_delegation={}, certificate_owner_stake_delegation={} )".format(self.certificate_pool_registration, self.certificate_stake_delegation, self.certificate_owner_stake_delegation )

    def __eq__(self, other):
        if self.certificate_pool_registration != other.certificate_pool_registration:
            return False
        if self.certificate_stake_delegation != other.certificate_stake_delegation:
            return False
        if self.certificate_owner_stake_delegation != other.certificate_owner_stake_delegation:
            return False
        return True

class PerVoteCertificateFee(object):
    def __init__(self,certificate_vote_plan, certificate_vote_cast ):
        self.certificate_vote_plan = certificate_vote_plan
        self.certificate_vote_cast = certificate_vote_cast

    def __str__(self):
        return "PerVoteCertificateFee(certificate_vote_plan={}, certificate_vote_cast={} )".format(self.certificate_vote_plan, self.certificate_vote_cast )

    def __eq__(self, other):
        if self.certificate_vote_plan != other.certificate_vote_plan:
            return False
        if self.certificate_vote_cast != other.certificate_vote_cast:
            return False
        return True

class TimeEra(object):
    def __init__(self,epoch_start, slot_start, slots_per_epoch ):
        self.epoch_start = epoch_start
        self.slot_start = slot_start
        self.slots_per_epoch = slots_per_epoch

    def __str__(self):
        return "TimeEra(epoch_start={}, slot_start={}, slots_per_epoch={} )".format(self.epoch_start, self.slot_start, self.slots_per_epoch )

    def __eq__(self, other):
        if self.epoch_start != other.epoch_start:
            return False
        if self.slot_start != other.slot_start:
            return False
        if self.slots_per_epoch != other.slots_per_epoch:
            return False
        return True

class SettingsInit(object):
    def __init__(self,fees, discrimination, block0_hash, block0_date, slot_duration, time_era, transaction_max_expiry_epochs ):
        self.fees = fees
        self.discrimination = discrimination
        self.block0_hash = block0_hash
        self.block0_date = block0_date
        self.slot_duration = slot_duration
        self.time_era = time_era
        self.transaction_max_expiry_epochs = transaction_max_expiry_epochs

    def __str__(self):
        return "SettingsInit(fees={}, discrimination={}, block0_hash={}, block0_date={}, slot_duration={}, time_era={}, transaction_max_expiry_epochs={} )".format(self.fees, self.discrimination, self.block0_hash, self.block0_date, self.slot_duration, self.time_era, self.transaction_max_expiry_epochs )

    def __eq__(self, other):
        if self.fees != other.fees:
            return False
        if self.discrimination != other.discrimination:
            return False
        if self.block0_hash != other.block0_hash:
            return False
        if self.block0_date != other.block0_date:
            return False
        if self.slot_duration != other.slot_duration:
            return False
        if self.time_era != other.time_era:
            return False
        if self.transaction_max_expiry_epochs != other.transaction_max_expiry_epochs:
            return False
        return True

class Proposal(object):
    def __init__(self,vote_plan_id, index, options, payload_type ):
        self.vote_plan_id = vote_plan_id
        self.index = index
        self.options = options
        self.payload_type = payload_type

    def __str__(self):
        return "Proposal(vote_plan_id={}, index={}, options={}, payload_type={} )".format(self.vote_plan_id, self.index, self.options, self.payload_type )

    def __eq__(self, other):
        if self.vote_plan_id != other.vote_plan_id:
            return False
        if self.index != other.index:
            return False
        if self.options != other.options:
            return False
        if self.payload_type != other.payload_type:
            return False
        return True

class BlockDate(object):
    def __init__(self,epoch, slot ):
        self.epoch = epoch
        self.slot = slot

    def __str__(self):
        return "BlockDate(epoch={}, slot={} )".format(self.epoch, self.slot )

    def __eq__(self, other):
        if self.epoch != other.epoch:
            return False
        if self.slot != other.slot:
            return False
        return True





class Wallet(object):
    def __init__(self, account_key):
        account_key = list(int(x) for x in account_key)
        self._pointer = rust_call(_UniFFILib.jormungandr_wallet_cc83_Wallet_new,RustBuffer.allocFromSequenceu8(account_key))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_jormungandr_wallet_cc83_Wallet_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    def set_state(self, value,counter):
        value = int(value)
        counter = int(counter)
        rust_call(_UniFFILib.jormungandr_wallet_cc83_Wallet_set_state,self._pointer,value,counter)
    
    def vote(self, settings,proposal,choice,valid_until):
        settings = settings
        proposal = proposal
        choice = int(choice)
        valid_until = valid_until
        _retval = rust_call_with_error(
    Error,_UniFFILib.jormungandr_wallet_cc83_Wallet_vote,self._pointer,(settings._pointer),RustBuffer.allocFromTypeProposal(proposal),choice,RustBuffer.allocFromTypeBlockDate(valid_until))
        return _retval.consumeIntoSequenceu8()
    
    

class Settings(object):
    def __init__(self, settings):
        settings = settings
        self._pointer = rust_call_with_error(Error,_UniFFILib.jormungandr_wallet_cc83_Settings_new,RustBuffer.allocFromTypeSettingsInit(settings))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.ffi_jormungandr_wallet_cc83_Settings_object_free, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    

    


__all__ = [
    "InternalError",
    "Discrimination",
    "PayloadTypeConfig",
    "LinearFee",
    "PerCertificateFee",
    "PerVoteCertificateFee",
    "TimeEra",
    "SettingsInit",
    "Proposal",
    "BlockDate",
    "Wallet",
    "Settings",
    "Error",
]

