// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")

package com.iohk.jormungandr_wallet;

// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the detils of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.util.concurrent.atomic.AtomicBoolean
import java.util.concurrent.atomic.AtomicLong

// The Rust Buffer and 3 templated methods (alloc, free, reserve).
// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    @JvmField var capacity: Int = 0
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue
    class ByReference : RustBuffer(), Structure.ByReference

    companion object {
        internal fun alloc(size: Int = 0) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_rustbuffer_alloc(size, status)
        }

        internal fun free(buf: RustBuffer.ByValue) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_rustbuffer_free(buf, status)
        }

        internal fun reserve(buf: RustBuffer.ByValue, additional: Int) = rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_rustbuffer_reserve(buf, additional, status)
        }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0
    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}


// A helper for structured writing of data into a `RustBuffer`.
// This is very similar to `java.nio.ByteBuffer` but it knows how to grow
// the underlying `RustBuffer` on demand.
//
// TODO: we should benchmark writing things into a `RustBuffer` versus building
// up a bytearray and then copying it across.

class RustBufferBuilder() {
    var rbuf = RustBuffer.ByValue()
    var bbuf: ByteBuffer? = null

    init {
        val rbuf = RustBuffer.alloc(16) // Totally arbitrary initial size
        rbuf.writeField("len", 0)
        this.setRustBuffer(rbuf)
    }

    internal fun setRustBuffer(rbuf: RustBuffer.ByValue) {
        this.rbuf = rbuf
        this.bbuf = this.rbuf.data?.getByteBuffer(0, this.rbuf.capacity.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
            it.position(rbuf.len)
        }
    }

    fun finalize() : RustBuffer.ByValue {
        val rbuf = this.rbuf
        // Ensure that the JVM-level field is written through to native memory
        // before turning the buffer, in case its recipient uses it in a context
        // JNA doesn't apply its automatic synchronization logic.
        rbuf.writeField("len", this.bbuf!!.position())
        this.setRustBuffer(RustBuffer.ByValue())
        return rbuf
    }

    fun discard() {
        if(this.rbuf.data != null) {
            // Free the current `RustBuffer`
            RustBuffer.free(this.rbuf)
            // Replace it with an empty RustBuffer.
            this.setRustBuffer(RustBuffer.ByValue())
        }
    }

    internal fun reserve(size: Int, write: (ByteBuffer) -> Unit) {
        // TODO: this will perform two checks to ensure we're not overflowing the buffer:
        // one here where we check if it needs to grow, and another when we call a write
        // method on the ByteBuffer. It might be cheaper to use exception-driven control-flow
        // here, trying the write and growing if it throws a `BufferOverflowException`.
        // Benchmarking needed.
        if (this.bbuf!!.position() + size > this.rbuf.capacity) {
            rbuf.writeField("len", this.bbuf!!.position())
            this.setRustBuffer(RustBuffer.reserve(this.rbuf, size))
        }
        write(this.bbuf!!)
    }

    fun putByte(v: Byte) {
        this.reserve(1) { bbuf ->
            bbuf.put(v)
        }
    }

    fun putShort(v: Short) {
        this.reserve(2) { bbuf ->
            bbuf.putShort(v)
        }
    }

    fun putInt(v: Int) {
        this.reserve(4) { bbuf ->
            bbuf.putInt(v)
        }
    }

    fun putLong(v: Long) {
        this.reserve(8) { bbuf ->
            bbuf.putLong(v)
        }
    }

    fun putFloat(v: Float) {
        this.reserve(4) { bbuf ->
            bbuf.putFloat(v)
        }
    }

    fun putDouble(v: Double) {
        this.reserve(8) { bbuf ->
            bbuf.putDouble(v)
        }
    }

    fun put(v: ByteArray) {
        this.reserve(v.size) { bbuf ->
            bbuf.put(v)
        }
    }
}

// Helpers for reading primitive data types from a bytebuffer.
internal fun<T> liftFromRustBuffer(rbuf: RustBuffer.ByValue, readItem: (ByteBuffer) -> T): T {
    val buf = rbuf.asByteBuffer()!!
    try {
       val item = readItem(buf)
       if (buf.hasRemaining()) {
           throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
       }
       return item
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun<T> lowerIntoRustBuffer(v: T, writeItem: (T, RustBufferBuilder) -> Unit): RustBuffer.ByValue {
    // TODO: maybe we can calculate some sort of initial size hint?
    val buf = RustBufferBuilder()
    try {
        writeItem(v, buf)
        return buf.finalize()
    } catch (e: Throwable) {
        buf.discard()
        throw e
    }
}

// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.
// Error runtime.
@Structure.FieldOrder("code", "error_buf")
internal open class RustCallStatus : Structure() {
    @JvmField var code: Int = 0
    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    fun isSuccess(): Boolean {
        return code == 0
    }

    fun isError(): Boolean {
        return code == 1
    }

    fun isPanic(): Boolean {
        return code == 2
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface CallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E;
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E: Exception> rustCallWithError(errorHandler: CallStatusErrorHandler<E>, callback: (RustCallStatus) -> U): U {
    var status = RustCallStatus();
    val return_value = callback(status)
    if (status.isSuccess()) {
        return return_value
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(String.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// CallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object NullCallStatusErrorHandler: CallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> rustCall(callback: (RustCallStatus) -> U): U {
    return rustCallWithError(NullCallStatusErrorHandler, callback);
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "uniffi_jormungandr_wallet"
}

private inline fun <reified Lib : Library> loadIndirect(
    componentName: String
): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface _UniFFILib : Library {
    companion object {
        internal val INSTANCE: _UniFFILib by lazy {
            loadIndirect<_UniFFILib>(componentName = "jormungandr_wallet")
            
            
        }
    }

    fun ffi_jormungandr_wallet_a148_Wallet_object_free(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun jormungandr_wallet_a148_Wallet_new(account_key: Pointer,utxo_keys: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Pointer

    fun jormungandr_wallet_a148_Wallet_from_mnemonics(mnemonics: RustBuffer.ByValue,password: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Pointer

    fun jormungandr_wallet_a148_Wallet_convert(ptr: Pointer,settings: Pointer,valid_until: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_Wallet_set_state(ptr: Pointer,value: Long,counter: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun jormungandr_wallet_a148_Wallet_vote(ptr: Pointer,settings: Pointer,proposal: RustBuffer.ByValue,choice: Byte,valid_until: RustBuffer.ByValue,lane: Byte,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_Wallet_confirm_transaction(ptr: Pointer,fragment_id: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun jormungandr_wallet_a148_Wallet_pending_transactions(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_Wallet_account_id(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_Wallet_spending_counters(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_Wallet_total_value(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): Long

    fun jormungandr_wallet_a148_Wallet_retrieve_funds(ptr: Pointer,block0: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Pointer

    fun ffi_jormungandr_wallet_a148_SecretKeyEd25519Extended_object_free(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun jormungandr_wallet_a148_SecretKeyEd25519Extended_new(raw: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Pointer

    fun ffi_jormungandr_wallet_a148_Fragment_object_free(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun jormungandr_wallet_a148_Fragment_new(raw: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Pointer

    fun jormungandr_wallet_a148_Fragment_id(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_Fragment_serialize(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_jormungandr_wallet_a148_Settings_object_free(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun jormungandr_wallet_a148_Settings_new(settings: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Pointer

    fun jormungandr_wallet_a148_Settings_settings_raw(ptr: Pointer,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_block_date_from_system_time(settings: Pointer,unix_epoch: Long,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_max_expiration_date(settings: Pointer,current_time: Long,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun jormungandr_wallet_a148_symmetric_cipher_decrypt(password: RustBuffer.ByValue,ciphertext: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_jormungandr_wallet_a148_rustbuffer_alloc(size: Int,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_jormungandr_wallet_a148_rustbuffer_from_bytes(bytes: ForeignBytes.ByValue,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    fun ffi_jormungandr_wallet_a148_rustbuffer_free(buf: RustBuffer.ByValue,
    uniffi_out_err: RustCallStatus
    ): Unit

    fun ffi_jormungandr_wallet_a148_rustbuffer_reserve(buf: RustBuffer.ByValue,additional: Int,
    uniffi_out_err: RustCallStatus
    ): RustBuffer.ByValue

    
}

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()
    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

// The base class for all UniFFI Object types.
//
// This class provides core operations for working with the Rust `Arc<T>` pointer to
// the live Rust struct on the other side of the FFI.
//
// There's some subtlety here, because we have to be careful not to operate on a Rust
// struct after it has been dropped, and because we must expose a public API for freeing
// the Kotlin wrapper object in lieu of reliable finalizers. The core requirements are:
//
//   * Each `FFIObject` instance holds an opaque pointer to the underlying Rust struct.
//     Method calls need to read this pointer from the object's state and pass it in to
//     the Rust FFI.
//
//   * When an `FFIObject` is no longer needed, its pointer should be passed to a
//     special destructor function provided by the Rust FFI, which will drop the
//     underlying Rust struct.
//
//   * Given an `FFIObject` instance, calling code is expected to call the special
//     `destroy` method in order to free it after use, either by calling it explicitly
//     or by using a higher-level helper like the `use` method. Failing to do so will
//     leak the underlying Rust struct.
//
//   * We can't assume that calling code will do the right thing, and must be prepared
//     to handle Kotlin method calls executing concurrently with or even after a call to
//     `destroy`, and to handle multiple (possibly concurrent!) calls to `destroy`.
//
//   * We must never allow Rust code to operate on the underlying Rust struct after
//     the destructor has been called, and must never call the destructor more than once.
//     Doing so may trigger memory unsafety.
//
// If we try to implement this with mutual exclusion on access to the pointer, there is the
// possibility of a race between a method call and a concurrent call to `destroy`:
//
//    * Thread A starts a method call, reads the value of the pointer, but is interrupted
//      before it can pass the pointer over the FFI to Rust.
//    * Thread B calls `destroy` and frees the underlying Rust struct.
//    * Thread A resumes, passing the already-read pointer value to Rust and triggering
//      a use-after-free.
//
// One possible solution would be to use a `ReadWriteLock`, with each method call taking
// a read lock (and thus allowed to run concurrently) and the special `destroy` method
// taking a write lock (and thus blocking on live method calls). However, we aim not to
// generate methods with any hidden blocking semantics, and a `destroy` method that might
// block if called incorrectly seems to meet that bar.
//
// So, we achieve our goals by giving each `FFIObject` an associated `AtomicLong` counter to track
// the number of in-flight method calls, and an `AtomicBoolean` flag to indicate whether `destroy`
// has been called. These are updated according to the following rules:
//
//    * The initial value of the counter is 1, indicating a live object with no in-flight calls.
//      The initial value for the flag is false.
//
//    * At the start of each method call, we atomically check the counter.
//      If it is 0 then the underlying Rust struct has already been destroyed and the call is aborted.
//      If it is nonzero them we atomically increment it by 1 and proceed with the method call.
//
//    * At the end of each method call, we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
//    * When `destroy` is called, we atomically flip the flag from false to true.
//      If the flag was already true we silently fail.
//      Otherwise we atomically decrement and check the counter.
//      If it has reached zero then we destroy the underlying Rust struct.
//
// Astute readers may observe that this all sounds very similar to the way that Rust's `Arc<T>` works,
// and indeed it is, with the addition of a flag to guard against multiple calls to `destroy`.
//
// The overall effect is that the underlying Rust struct is destroyed only when `destroy` has been
// called *and* all in-flight method calls have completed, avoiding violating any of the expectations
// of the underlying Rust code.
//
// In the future we may be able to replace some of this with automatic finalization logic, such as using
// the new "Cleaner" functionaility in Java 9. The above scheme has been designed to work even if `destroy` is
// invoked by garbage-collection machinery rather than by calling code (which by the way, it's apparently also
// possible for the JVM to finalize an object while there is an in-flight call to one of its methods [1],
// so there would still be some complexity here).
//
// Sigh...all of this for want of a robust finalization mechanism.
//
// [1] https://stackoverflow.com/questions/24376768/can-java-finalize-an-object-when-it-is-still-in-scope/24380219
//
abstract class FFIObject(
    protected val pointer: Pointer
): Disposable, AutoCloseable {

    private val wasDestroyed = AtomicBoolean(false)
    private val callCounter = AtomicLong(1)

    open protected fun freeRustArcPtr() {
        // To be overridden in subclasses.
    }

    override fun destroy() {
        // Only allow a single call to this method.
        // TODO: maybe we should log a warning if called more than once?
        if (this.wasDestroyed.compareAndSet(false, true)) {
            // This decrement always matches the initial count of 1 given at creation time.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }

    @Synchronized
    override fun close() {
        this.destroy()
    }

    internal inline fun <R> callWithPointer(block: (ptr: Pointer) -> R): R {
        // Check and increment the call counter, to keep the object alive.
        // This needs a compare-and-set retry loop in case of concurrent updates.
        do {
            val c = this.callCounter.get()
            if (c == 0L) {
                throw IllegalStateException("${this.javaClass.simpleName} object has already been destroyed")
            }
            if (c == Long.MAX_VALUE) {
                throw IllegalStateException("${this.javaClass.simpleName} call counter would overflow")
            }
        } while (! this.callCounter.compareAndSet(c, c + 1L))
        // Now we can safely do the method call without the pointer being freed concurrently.
        try {
            return block(this.pointer)
        } finally {
            // This decrement aways matches the increment we performed above.
            if (this.callCounter.decrementAndGet() == 0L) {
                this.freeRustArcPtr()
            }
        }
    }
}



enum class Discrimination {
    PRODUCTION,TEST;

    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): Discrimination {
            return liftFromRustBuffer(rbuf) { buf -> Discrimination.read(buf) }
        }

        internal fun read(buf: ByteBuffer) =
            try { values()[buf.getInt() - 1] }
            catch (e: IndexOutOfBoundsException) {
                throw RuntimeException("invalid enum value, something is very wrong!!", e)
            }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
        buf.putInt(this.ordinal + 1)
    }
}







sealed class PayloadTypeConfig  {
    object Public : PayloadTypeConfig()
    
    data class Private(
        val encryptionKey: String 
        ) : PayloadTypeConfig()
    

    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): PayloadTypeConfig {
            return liftFromRustBuffer(rbuf) { buf -> PayloadTypeConfig.read(buf) }
        }

        internal fun read(buf: ByteBuffer): PayloadTypeConfig {
            return when(buf.getInt()) {
                1 -> PayloadTypeConfig.Public
                2 -> PayloadTypeConfig.Private(
                    String.read(buf)
                    )
                else -> throw RuntimeException("invalid enum value, something is very wrong!!")
            }
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
        when(this) {
            is PayloadTypeConfig.Public -> {
                buf.putInt(1)
                
            }
            is PayloadTypeConfig.Private -> {
                buf.putInt(2)
                this.encryptionKey.write(buf)
                
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }

    
    
}




fun blockDateFromSystemTime(settings: Settings, unixEpoch: ULong ): BlockDate {
    val _retval = 
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_block_date_from_system_time(settings.lower(), unixEpoch.lower() ,status)
}
    return BlockDate.lift(_retval)
}



fun maxExpirationDate(settings: Settings, currentTime: ULong ): BlockDate {
    val _retval = 
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_max_expiration_date(settings.lower(), currentTime.lower() ,status)
}
    return BlockDate.lift(_retval)
}



fun symmetricCipherDecrypt(password: List<UByte>, ciphertext: List<UByte> ): List<UByte> {
    val _retval = 
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_symmetric_cipher_decrypt(lowerSequenceUByte(password), lowerSequenceUByte(ciphertext) ,status)
}
    return liftSequenceUByte(_retval)
}


public interface WalletInterface {
    fun convert(settings: Settings, validUntil: BlockDate ): Conversion
    fun setState(value: ULong, counter: List<UInt> )
    fun vote(settings: Settings, proposal: Proposal, choice: UByte, validUntil: BlockDate, lane: UByte ): List<UByte>
    fun confirmTransaction(fragmentId: List<UByte> )
    fun pendingTransactions(): List<List<UByte>>
    fun accountId(): List<UByte>
    fun spendingCounters(): List<UInt>
    fun totalValue(): ULong
    fun retrieveFunds(block0: List<UByte> ): Settings
    
}

class Wallet(
    pointer: Pointer
) : FFIObject(pointer), WalletInterface {
    constructor(accountKey: SecretKeyEd25519Extended, utxoKeys: List<SecretKeyEd25519Extended> ) :
        this(
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_new(accountKey.lower(), lowerSequenceObjectSecretKeyEd25519Extended(utxoKeys) ,status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_Wallet_object_free(this.pointer, status)
        }
    }

    internal fun lower(): Pointer = callWithPointer { it }

    internal fun write(buf: RustBufferBuilder) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(this.lower()))
    }

    override fun convert(settings: Settings, validUntil: BlockDate ): Conversion =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_convert(it, settings.lower(), validUntil.lower() , status)
}
        }.let {
            Conversion.lift(it)
        }
    
    override fun setState(value: ULong, counter: List<UInt> ) =
        callWithPointer {
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_set_state(it, value.lower(), lowerSequenceUInt(counter) , status)
}
        }
    
    override fun vote(settings: Settings, proposal: Proposal, choice: UByte, validUntil: BlockDate, lane: UByte ): List<UByte> =
        callWithPointer {
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_vote(it, settings.lower(), proposal.lower(), choice.lower(), validUntil.lower(), lane.lower() , status)
}
        }.let {
            liftSequenceUByte(it)
        }
    
    override fun confirmTransaction(fragmentId: List<UByte> ) =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_confirm_transaction(it, lowerSequenceUByte(fragmentId) , status)
}
        }
    
    override fun pendingTransactions(): List<List<UByte>> =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_pending_transactions(it,  status)
}
        }.let {
            liftSequenceSequenceUByte(it)
        }
    
    override fun accountId(): List<UByte> =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_account_id(it,  status)
}
        }.let {
            liftSequenceUByte(it)
        }
    
    override fun spendingCounters(): List<UInt> =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_spending_counters(it,  status)
}
        }.let {
            liftSequenceUInt(it)
        }
    
    override fun totalValue(): ULong =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_total_value(it,  status)
}
        }.let {
            ULong.lift(it)
        }
    
    override fun retrieveFunds(block0: List<UByte> ): Settings =
        callWithPointer {
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_retrieve_funds(it, lowerSequenceUByte(block0) , status)
}
        }.let {
            Settings.lift(it)
        }
    
    

    companion object {
        internal fun lift(ptr: Pointer): Wallet {
            return Wallet(ptr)
        }

        internal fun read(buf: ByteBuffer): Wallet {
            // The Rust code always writes pointers as 8 bytes, and will
            // fail to compile if they don't fit.
            return Wallet.lift(Pointer(buf.getLong()))
        }

        fun fromMnemonics(mnemonics: String, password: List<UByte> ): Wallet =
            Wallet(
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Wallet_from_mnemonics(mnemonics.lower(), lowerSequenceUByte(password) ,status)
})
        
    }
}

public interface SecretKeyEd25519ExtendedInterface {
    
}

class SecretKeyEd25519Extended(
    pointer: Pointer
) : FFIObject(pointer), SecretKeyEd25519ExtendedInterface {
    constructor(raw: List<UByte> ) :
        this(
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_SecretKeyEd25519Extended_new(lowerSequenceUByte(raw) ,status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_SecretKeyEd25519Extended_object_free(this.pointer, status)
        }
    }

    internal fun lower(): Pointer = callWithPointer { it }

    internal fun write(buf: RustBufferBuilder) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(this.lower()))
    }

    

    companion object {
        internal fun lift(ptr: Pointer): SecretKeyEd25519Extended {
            return SecretKeyEd25519Extended(ptr)
        }

        internal fun read(buf: ByteBuffer): SecretKeyEd25519Extended {
            // The Rust code always writes pointers as 8 bytes, and will
            // fail to compile if they don't fit.
            return SecretKeyEd25519Extended.lift(Pointer(buf.getLong()))
        }

        
    }
}

public interface FragmentInterface {
    fun id(): List<UByte>
    fun serialize(): List<UByte>
    
}

class Fragment(
    pointer: Pointer
) : FFIObject(pointer), FragmentInterface {
    constructor(raw: List<UByte> ) :
        this(
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Fragment_new(lowerSequenceUByte(raw) ,status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_Fragment_object_free(this.pointer, status)
        }
    }

    internal fun lower(): Pointer = callWithPointer { it }

    internal fun write(buf: RustBufferBuilder) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(this.lower()))
    }

    override fun id(): List<UByte> =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Fragment_id(it,  status)
}
        }.let {
            liftSequenceUByte(it)
        }
    
    override fun serialize(): List<UByte> =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Fragment_serialize(it,  status)
}
        }.let {
            liftSequenceUByte(it)
        }
    
    

    companion object {
        internal fun lift(ptr: Pointer): Fragment {
            return Fragment(ptr)
        }

        internal fun read(buf: ByteBuffer): Fragment {
            // The Rust code always writes pointers as 8 bytes, and will
            // fail to compile if they don't fit.
            return Fragment.lift(Pointer(buf.getLong()))
        }

        
    }
}

public interface SettingsInterface {
    fun settingsRaw(): SettingsRaw
    
}

class Settings(
    pointer: Pointer
) : FFIObject(pointer), SettingsInterface {
    constructor(settings: SettingsRaw ) :
        this(
    rustCallWithError(WalletException) { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Settings_new(settings.lower() ,status)
})

    /**
     * Disconnect the object from the underlying Rust object.
     *
     * It can be called more than once, but once called, interacting with the object
     * causes an `IllegalStateException`.
     *
     * Clients **must** call this method once done with the object, or cause a memory leak.
     */
    override protected fun freeRustArcPtr() {
        rustCall() { status ->
            _UniFFILib.INSTANCE.ffi_jormungandr_wallet_a148_Settings_object_free(this.pointer, status)
        }
    }

    internal fun lower(): Pointer = callWithPointer { it }

    internal fun write(buf: RustBufferBuilder) {
        // The Rust code always expects pointers written as 8 bytes,
        // and will fail to compile if they don't fit.
        buf.putLong(Pointer.nativeValue(this.lower()))
    }

    override fun settingsRaw(): SettingsRaw =
        callWithPointer {
    rustCall() { status ->
    _UniFFILib.INSTANCE.jormungandr_wallet_a148_Settings_settings_raw(it,  status)
}
        }.let {
            SettingsRaw.lift(it)
        }
    
    

    companion object {
        internal fun lift(ptr: Pointer): Settings {
            return Settings(ptr)
        }

        internal fun read(buf: ByteBuffer): Settings {
            // The Rust code always writes pointers as 8 bytes, and will
            // fail to compile if they don't fit.
            return Settings.lift(Pointer(buf.getLong()))
        }

        
    }
}

data class LinearFee (
    var constant: ULong, 
    var coefficient: ULong, 
    var certificate: ULong, 
    var perCertificateFees: PerCertificateFee, 
    var perVoteCertificateFees: PerVoteCertificateFee 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): LinearFee {
            return liftFromRustBuffer(rbuf) { buf -> LinearFee.read(buf) }
        }

        internal fun read(buf: ByteBuffer): LinearFee {
            return LinearFee(
            ULong.read(buf),
            ULong.read(buf),
            ULong.read(buf),
            PerCertificateFee.read(buf),
            PerVoteCertificateFee.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.constant.write(buf)
        
            this.coefficient.write(buf)
        
            this.certificate.write(buf)
        
            this.perCertificateFees.write(buf)
        
            this.perVoteCertificateFees.write(buf)
        
    }

    
    
}

data class PerCertificateFee (
    var certificatePoolRegistration: ULong, 
    var certificateStakeDelegation: ULong, 
    var certificateOwnerStakeDelegation: ULong 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): PerCertificateFee {
            return liftFromRustBuffer(rbuf) { buf -> PerCertificateFee.read(buf) }
        }

        internal fun read(buf: ByteBuffer): PerCertificateFee {
            return PerCertificateFee(
            ULong.read(buf),
            ULong.read(buf),
            ULong.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.certificatePoolRegistration.write(buf)
        
            this.certificateStakeDelegation.write(buf)
        
            this.certificateOwnerStakeDelegation.write(buf)
        
    }

    
    
}

data class PerVoteCertificateFee (
    var certificateVotePlan: ULong, 
    var certificateVoteCast: ULong 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): PerVoteCertificateFee {
            return liftFromRustBuffer(rbuf) { buf -> PerVoteCertificateFee.read(buf) }
        }

        internal fun read(buf: ByteBuffer): PerVoteCertificateFee {
            return PerVoteCertificateFee(
            ULong.read(buf),
            ULong.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.certificateVotePlan.write(buf)
        
            this.certificateVoteCast.write(buf)
        
    }

    
    
}

data class TimeEra (
    var epochStart: UInt, 
    var slotStart: ULong, 
    var slotsPerEpoch: UInt 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): TimeEra {
            return liftFromRustBuffer(rbuf) { buf -> TimeEra.read(buf) }
        }

        internal fun read(buf: ByteBuffer): TimeEra {
            return TimeEra(
            UInt.read(buf),
            ULong.read(buf),
            UInt.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.epochStart.write(buf)
        
            this.slotStart.write(buf)
        
            this.slotsPerEpoch.write(buf)
        
    }

    
    
}

data class SettingsRaw (
    var fees: LinearFee, 
    var discrimination: Discrimination, 
    var block0Hash: List<UByte>, 
    var block0Date: ULong, 
    var slotDuration: UByte, 
    var timeEra: TimeEra, 
    var transactionMaxExpiryEpochs: UByte 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): SettingsRaw {
            return liftFromRustBuffer(rbuf) { buf -> SettingsRaw.read(buf) }
        }

        internal fun read(buf: ByteBuffer): SettingsRaw {
            return SettingsRaw(
            LinearFee.read(buf),
            Discrimination.read(buf),
            readSequenceUByte(buf),
            ULong.read(buf),
            UByte.read(buf),
            TimeEra.read(buf),
            UByte.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.fees.write(buf)
        
            this.discrimination.write(buf)
        
            writeSequenceUByte(this.block0Hash, buf)
        
            this.block0Date.write(buf)
        
            this.slotDuration.write(buf)
        
            this.timeEra.write(buf)
        
            this.transactionMaxExpiryEpochs.write(buf)
        
    }

    
    
}

data class Proposal (
    var votePlanId: List<UByte>, 
    var index: UByte, 
    var options: UByte, 
    var payloadType: PayloadTypeConfig 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): Proposal {
            return liftFromRustBuffer(rbuf) { buf -> Proposal.read(buf) }
        }

        internal fun read(buf: ByteBuffer): Proposal {
            return Proposal(
            readSequenceUByte(buf),
            UByte.read(buf),
            UByte.read(buf),
            PayloadTypeConfig.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            writeSequenceUByte(this.votePlanId, buf)
        
            this.index.write(buf)
        
            this.options.write(buf)
        
            this.payloadType.write(buf)
        
    }

    
    
}

data class BlockDate (
    var epoch: UInt, 
    var slot: UInt 
)  {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): BlockDate {
            return liftFromRustBuffer(rbuf) { buf -> BlockDate.read(buf) }
        }

        internal fun read(buf: ByteBuffer): BlockDate {
            return BlockDate(
            UInt.read(buf),
            UInt.read(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.epoch.write(buf)
        
            this.slot.write(buf)
        
    }

    
    
}

data class Conversion (
    var ignoredValue: ULong, 
    var ignoredCount: UInt, 
    var fragments: List<Fragment> 
) : Disposable {
    companion object {
        internal fun lift(rbuf: RustBuffer.ByValue): Conversion {
            return liftFromRustBuffer(rbuf) { buf -> Conversion.read(buf) }
        }

        internal fun read(buf: ByteBuffer): Conversion {
            return Conversion(
            ULong.read(buf),
            UInt.read(buf),
            readSequenceObjectFragment(buf)
            )
        }
    }

    internal fun lower(): RustBuffer.ByValue {
        return lowerIntoRustBuffer(this, {v, buf -> v.write(buf)})
    }

    internal fun write(buf: RustBufferBuilder) {
            this.ignoredValue.write(buf)
        
            this.ignoredCount.write(buf)
        
            writeSequenceObjectFragment(this.fragments, buf)
        
    }

    
    @Suppress("UNNECESSARY_SAFE_CALL") // codegen is much simpler if we unconditionally emit safe calls here
    override fun destroy() {
        
    Disposable.destroy(
        this.ignoredValue, 
        this.ignoredCount, 
        this.fragments )
    }
    
}


// Error WalletError

sealed class WalletException(message: String): Exception(message)  {
        // Each variant is a nested class
        // Flat enums carries a string error message, so no special implementation is necessary.
        class InvalidEncryptionKey(message: String) : WalletException(message)
        class MalformedVotePlanId(message: String) : WalletException(message)
        class CoreException(message: String) : WalletException(message)
        class MalformedBlock0Hash(message: String) : WalletException(message)
        class MalformedSecretKey(message: String) : WalletException(message)
        class TimeException(message: String) : WalletException(message)
        class CipherException(message: String) : WalletException(message)
        class InvalidFragment(message: String) : WalletException(message)
        class InvalidSpendingCounters(message: String) : WalletException(message)
        

    companion object ErrorHandler : CallStatusErrorHandler<WalletException> {
        override fun lift(error_buf: RustBuffer.ByValue): WalletException {
            return liftFromRustBuffer(error_buf) { error_buf -> read(error_buf) }
        }

        fun read(error_buf: ByteBuffer): WalletException {
            
                return when(error_buf.getInt()) {
                1 -> WalletException.InvalidEncryptionKey(String.read(error_buf))
                2 -> WalletException.MalformedVotePlanId(String.read(error_buf))
                3 -> WalletException.CoreException(String.read(error_buf))
                4 -> WalletException.MalformedBlock0Hash(String.read(error_buf))
                5 -> WalletException.MalformedSecretKey(String.read(error_buf))
                6 -> WalletException.TimeException(String.read(error_buf))
                7 -> WalletException.CipherException(String.read(error_buf))
                8 -> WalletException.InvalidFragment(String.read(error_buf))
                9 -> WalletException.InvalidSpendingCounters(String.read(error_buf))
                else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
            }
        }
    }

    
    
}
internal fun UByte.Companion.lift(v: Byte): UByte {
    return v.toUByte()
}

internal fun UByte.Companion.read(buf: ByteBuffer): UByte {
    return UByte.lift(buf.get())
}

internal fun UByte.lower(): Byte {
    return this.toByte()
}

internal fun UByte.write(buf: RustBufferBuilder) {
    buf.putByte(this.toByte())
}
internal fun UInt.Companion.lift(v: Int): UInt {
    return v.toUInt()
}

internal fun UInt.Companion.read(buf: ByteBuffer): UInt {
    return UInt.lift(buf.getInt())
}

internal fun UInt.lower(): Int {
    return this.toInt()
}

internal fun UInt.write(buf: RustBufferBuilder) {
    buf.putInt(this.toInt())
}
internal fun ULong.Companion.lift(v: Long): ULong {
    return v.toULong()
}

internal fun ULong.Companion.read(buf: ByteBuffer): ULong {
    return ULong.lift(buf.getLong())
}

internal fun ULong.lower(): Long {
    return this.toLong()
}

internal fun ULong.write(buf: RustBufferBuilder) {
    buf.putLong(this.toLong())
}
internal fun String.Companion.lift(rbuf: RustBuffer.ByValue): String {
    try {
        val byteArr = ByteArray(rbuf.len)
        rbuf.asByteBuffer()!!.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    } finally {
        RustBuffer.free(rbuf)
    }
}

internal fun String.Companion.read(buf: ByteBuffer): String {
    val len = buf.getInt()
    val byteArr = ByteArray(len)
    buf.get(byteArr)
    return byteArr.toString(Charsets.UTF_8)
}

internal fun String.lower(): RustBuffer.ByValue {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
    // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
    val rbuf = RustBuffer.alloc(byteArr.size)
    rbuf.asByteBuffer()!!.put(byteArr)
    return rbuf
}

internal fun String.write(buf: RustBufferBuilder) {
    val byteArr = this.toByteArray(Charsets.UTF_8)
    buf.putInt(byteArr.size)
    buf.put(byteArr)
}
// Helper code for Fragment class is found in ObjectTemplate.kt
// Helper code for SecretKeyEd25519Extended class is found in ObjectTemplate.kt
// Helper code for Settings class is found in ObjectTemplate.kt
// Helper code for Wallet class is found in ObjectTemplate.kt
// Helper code for BlockDate record is found in RecordTemplate.kt
// Helper code for Conversion record is found in RecordTemplate.kt
// Helper code for LinearFee record is found in RecordTemplate.kt
// Helper code for PerCertificateFee record is found in RecordTemplate.kt
// Helper code for PerVoteCertificateFee record is found in RecordTemplate.kt
// Helper code for Proposal record is found in RecordTemplate.kt
// Helper code for SettingsRaw record is found in RecordTemplate.kt
// Helper code for TimeEra record is found in RecordTemplate.kt
// Helper code for Discrimination enum is found in EnumTemplate.kt
// Helper code for PayloadTypeConfig enum is found in EnumTemplate.kt
// Helper code for WalletError error is found in ErrorTemplate.kt


// Helper functions for passing values of type List<UByte>
internal fun lowerSequenceUByte(v: List<UByte>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceUByte(v, buf)
    }
}

internal fun writeSequenceUByte(v: List<UByte>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceUByte(rbuf: RustBuffer.ByValue): List<UByte> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceUByte(buf)
    }
}

internal fun readSequenceUByte(buf: ByteBuffer): List<UByte> {
    val len = buf.getInt()
    return List<UByte>(len) {
        UByte.read(buf)
    }
}


// Helper functions for passing values of type List<UInt>
internal fun lowerSequenceUInt(v: List<UInt>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceUInt(v, buf)
    }
}

internal fun writeSequenceUInt(v: List<UInt>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceUInt(rbuf: RustBuffer.ByValue): List<UInt> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceUInt(buf)
    }
}

internal fun readSequenceUInt(buf: ByteBuffer): List<UInt> {
    val len = buf.getInt()
    return List<UInt>(len) {
        UInt.read(buf)
    }
}


// Helper functions for passing values of type List<Fragment>
internal fun lowerSequenceObjectFragment(v: List<Fragment>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceObjectFragment(v, buf)
    }
}

internal fun writeSequenceObjectFragment(v: List<Fragment>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceObjectFragment(rbuf: RustBuffer.ByValue): List<Fragment> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceObjectFragment(buf)
    }
}

internal fun readSequenceObjectFragment(buf: ByteBuffer): List<Fragment> {
    val len = buf.getInt()
    return List<Fragment>(len) {
        Fragment.read(buf)
    }
}


// Helper functions for passing values of type List<SecretKeyEd25519Extended>
internal fun lowerSequenceObjectSecretKeyEd25519Extended(v: List<SecretKeyEd25519Extended>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceObjectSecretKeyEd25519Extended(v, buf)
    }
}

internal fun writeSequenceObjectSecretKeyEd25519Extended(v: List<SecretKeyEd25519Extended>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        it.write(buf)
    }
}

internal fun liftSequenceObjectSecretKeyEd25519Extended(rbuf: RustBuffer.ByValue): List<SecretKeyEd25519Extended> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceObjectSecretKeyEd25519Extended(buf)
    }
}

internal fun readSequenceObjectSecretKeyEd25519Extended(buf: ByteBuffer): List<SecretKeyEd25519Extended> {
    val len = buf.getInt()
    return List<SecretKeyEd25519Extended>(len) {
        SecretKeyEd25519Extended.read(buf)
    }
}


// Helper functions for passing values of type List<List<UByte>>
internal fun lowerSequenceSequenceUByte(v: List<List<UByte>>): RustBuffer.ByValue {
    return lowerIntoRustBuffer(v) { v, buf ->
        writeSequenceSequenceUByte(v, buf)
    }
}

internal fun writeSequenceSequenceUByte(v: List<List<UByte>>, buf: RustBufferBuilder) {
    buf.putInt(v.size)
    v.forEach {
        writeSequenceUByte(it, buf)
    }
}

internal fun liftSequenceSequenceUByte(rbuf: RustBuffer.ByValue): List<List<UByte>> {
    return liftFromRustBuffer(rbuf) { buf ->
        readSequenceSequenceUByte(buf)
    }
}

internal fun readSequenceSequenceUByte(buf: ByteBuffer): List<List<UByte>> {
    val len = buf.getInt()
    return List<List<UByte>>(len) {
        readSequenceUByte(buf)
    }
}

