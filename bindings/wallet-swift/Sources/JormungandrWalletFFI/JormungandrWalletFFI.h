// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

#pragma once

#include <stdbool.h>
#include <stdint.h>

// The following structs are used to implement the lowest level
// of the FFI, and thus useful to multiple uniffied crates.
// We ensure they are declared exactly once, with a header guard, UNIFFI_SHARED_H.
#ifdef UNIFFI_SHARED_H
    // We also try to prevent mixing versions of shared uniffi header structs.
    // If you add anything to the #else block, you must increment the version suffix in UNIFFI_SHARED_HEADER_V4
    #ifndef UNIFFI_SHARED_HEADER_V4
        #error Combining helper code from multiple versions of uniffi is not supported
    #endif // ndef UNIFFI_SHARED_HEADER_V4
#else
#define UNIFFI_SHARED_H
#define UNIFFI_SHARED_HEADER_V4
// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️

typedef struct RustBuffer
{
    int32_t capacity;
    int32_t len;
    uint8_t *_Nullable data;
} RustBuffer;

typedef int32_t (*ForeignCallback)(uint64_t, int32_t, RustBuffer, RustBuffer *_Nonnull);

typedef struct ForeignBytes
{
    int32_t len;
    const uint8_t *_Nullable data;
} ForeignBytes;

// Error definitions
typedef struct RustCallStatus {
    int8_t code;
    RustBuffer errorBuf;
} RustCallStatus;

// ⚠️ Attention: If you change this #else block (ending in `#endif // def UNIFFI_SHARED_H`) you *must* ⚠️
// ⚠️ increment the version suffix in all instances of UNIFFI_SHARED_HEADER_V4 in this file.           ⚠️
#endif // def UNIFFI_SHARED_H

void ffi_jormungandr_wallet_1e88_Wallet_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull jormungandr_wallet_1e88_Wallet_new(
      void*_Nonnull account_key,RustBuffer utxo_keys,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull jormungandr_wallet_1e88_Wallet_from_mnemonics(
      RustBuffer mnemonics,RustBuffer password,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Wallet_convert(
      void*_Nonnull ptr,void*_Nonnull settings,RustBuffer valid_until,
    RustCallStatus *_Nonnull out_status
    );
void jormungandr_wallet_1e88_Wallet_set_state(
      void*_Nonnull ptr,uint64_t value,uint32_t counter,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Wallet_vote(
      void*_Nonnull ptr,void*_Nonnull settings,RustBuffer proposal,uint8_t choice,RustBuffer valid_until,
    RustCallStatus *_Nonnull out_status
    );
void jormungandr_wallet_1e88_Wallet_confirm_transaction(
      void*_Nonnull ptr,RustBuffer fragment_id,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Wallet_pending_transactions(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Wallet_account_id(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint32_t jormungandr_wallet_1e88_Wallet_spending_counter(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
uint64_t jormungandr_wallet_1e88_Wallet_total_value(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull jormungandr_wallet_1e88_Wallet_retrieve_funds(
      void*_Nonnull ptr,RustBuffer block0,
    RustCallStatus *_Nonnull out_status
    );
void ffi_jormungandr_wallet_1e88_SecretKeyEd25519Extended_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull jormungandr_wallet_1e88_SecretKeyEd25519Extended_new(
      RustBuffer raw,
    RustCallStatus *_Nonnull out_status
    );
void ffi_jormungandr_wallet_1e88_Fragment_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull jormungandr_wallet_1e88_Fragment_new(
      RustBuffer raw,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Fragment_id(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Fragment_serialize(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void ffi_jormungandr_wallet_1e88_Settings_object_free(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
void*_Nonnull jormungandr_wallet_1e88_Settings_new(
      RustBuffer settings,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_Settings_settings_raw(
      void*_Nonnull ptr,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_block_date_from_system_time(
      void*_Nonnull settings,uint64_t unix_epoch,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_max_expiration_date(
      void*_Nonnull settings,uint64_t current_time,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer jormungandr_wallet_1e88_symmetric_cipher_decrypt(
      RustBuffer password,RustBuffer ciphertext,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_jormungandr_wallet_1e88_rustbuffer_alloc(
      int32_t size,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_jormungandr_wallet_1e88_rustbuffer_from_bytes(
      ForeignBytes bytes,
    RustCallStatus *_Nonnull out_status
    );
void ffi_jormungandr_wallet_1e88_rustbuffer_free(
      RustBuffer buf,
    RustCallStatus *_Nonnull out_status
    );
RustBuffer ffi_jormungandr_wallet_1e88_rustbuffer_reserve(
      RustBuffer buf,int32_t additional,
    RustCallStatus *_Nonnull out_status
    );
